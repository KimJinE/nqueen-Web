{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kimjin/Desktop/notes/CISC481/Program2/program2/my-app/src/MainPage/MainPage.jsx\";\nimport React from \"react\";\nimport { Container, Row, Col, Button, Modal, ListGroup, Spinner } from \"react-bootstrap\";\nimport \"./MainPage.css\";\nimport Select from \"react-select\";\nimport queen from \"../queen.jpg\";\nimport x from \"../x.jpg\";\nimport Carousel from 'react-bootstrap/Carousel';\nvar options = [{\n  label: \"1 queen\",\n  value: 1\n}];\nconst colors = {\n  1: \"#23AF23\",\n  2: \"#98C90B\"\n};\nconst colors2 = {\n  2: \"#23AF23\",\n  1: \"#98C90B\"\n};\nexport default class MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.Queennumber = e => {\n      const val = e.value;\n      var curBoard = [];\n\n      for (var i = 0; i < val; i++) {\n        curBoard.push(new Array(val).fill(0));\n      }\n\n      this.setState({\n        board: curBoard,\n        board2: JSON.parse(JSON.stringify(curBoard)),\n        queens: val,\n        solution: [],\n        presetboard: curBoard\n      });\n      this.forceUpdate();\n    };\n\n    this.isSave = (board, row, col) => {\n      var i, j;\n\n      for (i = 0; i < board.length; i++) if (board[row][i] === 1) return false;\n\n      for (i = row, j = col; i >= 0 && j >= 0; i--, j--) if (board[i][j] === 1) return false;\n\n      for (i = row, j = col; j >= 0 && i < board.length; i++, j--) if (board[i][j] === 1) return false;\n\n      for (i = row, j = col; i < board.length && j < board.length; i++, j++) if (board[i][j] === 1) return false;\n\n      for (i = row, j = col; i >= 0 && j < board.length; i--, j++) if (board[i][j] === 1) return false;\n\n      for (i = board.length; i >= 0; i--) if (board[row][i] === 1) return false;\n\n      return true;\n    };\n\n    this.setrow = (e, rows, column) => {\n      var mypicking = this.state.picking;\n      var tempreset = this.state.presetboard;\n\n      for (var i = 0; i < mypicking.length; i++) {\n        if (mypicking[i][0] === rows) {\n          tempreset[mypicking[i][0]][mypicking[i][1]] = 0;\n          mypicking.splice(i, 1);\n        }\n      }\n\n      mypicking.push([rows, column]);\n      tempreset[rows][column] = 1;\n      this.setState({\n        picking: mypicking,\n        presetboard: tempreset\n      });\n      this.forceUpdate();\n    };\n\n    this.solveThePuzzle = (board, col, mysolution) => {\n      if (col === board.length) {\n        mysolution.push(JSON.parse(JSON.stringify(board)));\n        return true;\n      }\n\n      var res = false;\n\n      for (var i = 0; i < board.length; i++) {\n        if (this.isSave(board, i, col)) {\n          board[i][col] = 1;\n          res = this.solveThePuzzle(board, col + 1, mysolution) || res;\n          board[i][col] = 0;\n        }\n      }\n\n      return res;\n    };\n\n    this.solve = (e, i) => {\n      var mysolution = [];\n      this.solveThePuzzle(this.state.board2, 0, mysolution);\n      const after_filter = [];\n      const preset = this.state.picking;\n      console.log(this.state.picking);\n      mysolution.forEach(vall => {\n        var contains = true;\n\n        for (var i = 0; i < preset.length; i++) {\n          if (vall[preset[i][0]][preset[i][1]] === 0) {\n            console.log(\"reach\");\n            contains = false;\n          }\n        }\n\n        if (contains === true) after_filter.push(vall);\n      });\n\n      if (after_filter.length === 0) {\n        alert(\"there is no solutions\");\n      }\n\n      this.setState({\n        solution: after_filter,\n        loading: \"none\"\n      });\n      this.forceUpdate();\n    };\n\n    this.show = (e, i) => {\n      // console.log(this.state.solution.length);\n      if (this.state.solution.length === 0) {\n        alert(\"there is solution for this puzzle yet\");\n        return;\n      }\n\n      var results = [];\n      const board = this.state.solution[0];\n\n      for (var j = 0; j < board.length; j++) {\n        results.push(this.paint(board, j));\n      }\n\n      this.setState({\n        resultboards: results,\n        hassolution: true\n      });\n    };\n\n    this.paint = (board, i) => {\n      var tem = JSON.parse(JSON.stringify(board));\n      tem = tem.fill(0);\n\n      for (var j in i) {\n        tem[j] = board[j];\n      }\n\n      return tem;\n    };\n\n    this.clear = () => {\n      var newBoard = [];\n      this.state.board.forEach(val => {\n        newBoard.push(new Array(val.length).fill(0));\n      });\n      this.setState({\n        board: newBoard,\n        board2: JSON.parse(JSON.stringify(newBoard)),\n        presetboard: newBoard,\n        picking: [],\n        solution: [],\n        hassolution: false\n      });\n      this.forceUpdate();\n    };\n\n    this.state = {\n      board: [],\n      board2: [],\n      solution: [],\n      queens: 8,\n      show: false,\n      showselected: false,\n      curSelectSolution: null,\n      loading: \"none\",\n      picking: [],\n      presetboard: [],\n      resultboards: [],\n      hassolution: false\n    };\n  }\n\n  componentDidMount() {\n    for (var j = 2; j <= 32; j++) {\n      options.push({\n        label: `${j} queens`,\n        value: j\n      });\n    }\n\n    var curBoard = [];\n\n    for (var i = 0; i < this.state.queens; i++) {\n      curBoard.push(new Array(this.state.queens).fill(0));\n    }\n\n    this.setState({\n      board: curBoard,\n      board2: JSON.parse(JSON.stringify(curBoard)),\n      presetboard: curBoard\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"web-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainpart\",\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          role: \"status\",\n          style: {\n            display: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sizeDecide\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"selection\",\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              style: {\n                position: 'absolute',\n                top: '50%'\n              },\n              onChange: e => {\n                console.log(e);\n                this.Queennumber(e);\n              },\n              label: \"Select Queens\",\n              options: options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"texts\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Backtracking Search for n-queeen problem\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            width: '94%',\n            height: '40%',\n            marginTop: '30px',\n            marginLeft: '3%',\n            border: 'solid #33BCC1 2px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginTop: '10px',\n              marginLeft: '3%',\n              height: '20px',\n              color: 'white',\n              fontWeight: 'bold',\n              fontSize: '15px'\n            },\n            children: \"Specify Any Required location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"controller\",\n            children: this.state.presetboard.map((val, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cheese\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  backgroundColor: '#33BCC1',\n                  width: '30px',\n                  height: '100%',\n                  color: 'white',\n                  fontSize: '15px',\n                  textAlign: 'center',\n                  borderRadius: '6px',\n                  display: 'inline-block'\n                },\n                children: [\"Q\", index + 1, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 37\n              }, this), val.map((vall, i) => {\n                var back = '#9C9E9E';\n\n                switch (vall) {\n                  default:\n                    back = '#9C9E9E';\n                    break;\n\n                  case 1:\n                    back = '#454848';\n                }\n\n                return /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"pickrow\",\n                  style: {\n                    width: \"30px\",\n                    height: \"100%\",\n                    backgroundColor: back,\n                    display: 'inline-block',\n                    borderRadius: '6px',\n                    textAlign: 'center',\n                    color: 'white',\n                    marginLeft: '1px',\n                    border: 'none',\n                    transform: 'translateY(10%)'\n                  },\n                  onClick: e => {\n                    this.setrow(e, index, i);\n                  },\n                  children: i + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 45\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"button\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              className: \"buttons\",\n              onClick: this.solve,\n              children: \"Slove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"buttons\",\n              onClick: this.show,\n              children: \"show\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"buttons\",\n              onClick: this.clear,\n              children: \"clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), this.state.hassolution ? /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"mainboard2\",\n          children: this.state.resultboards.map(valll => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"mainboard\",\n            children: valll.map((val, index) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                xs: 10,\n                style: {\n                  height: 640 / this.state.board.length + \"px\",\n                  alignContent: \"center\",\n                  justifyContent: \"center\",\n                  textAlignVertical: \"center\",\n                  textAlign: \"center\",\n                  margin: \"0.1vh\"\n                },\n                children: val.map((vall, a) => {\n                  const cur = index % 2 === 0 ? colors2 : colors;\n                  var img = \"\";\n\n                  switch (vall) {\n                    default:\n                      img = \"\";\n                      break;\n\n                    case 1:\n                      img = queen;\n                      break;\n\n                    case -1:\n                      img = x;\n                      break;\n                  }\n\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      width: 640 / val.length + 'px',\n                      display: \"inline-block\",\n                      alignContent: \"center\",\n                      justifyContent: \"center\",\n                      textAlignVertical: \"center\",\n                      textAlign: \"center\",\n                      backgroundColor: cur[a % 2 + 1],\n                      margin: \"0.1vh\",\n                      height: \"100%\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      style: {\n                        backgroundColor: \"transparent\",\n                        outlineColor: \"transparent\",\n                        borderColor: \"transparent\",\n                        marginTop: \"10%\",\n                        backgroundImage: `url(${img})`,\n                        backgroundSize: \"100% 100%\",\n                        height: \"80%\",\n                        width: \"80%\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 316,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 45\n                  }, this);\n                })\n              }, \"row\" + index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"mainboard\",\n          children: this.state.board.map((val, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              xs: 10,\n              style: {\n                height: 640 / this.state.board.length + \"px\",\n                alignContent: \"center\",\n                justifyContent: \"center\",\n                textAlignVertical: \"center\",\n                textAlign: \"center\",\n                margin: \"0.1vh\"\n              },\n              children: val.map((vall, a) => {\n                const cur = index % 2 === 0 ? colors2 : colors;\n                var img = \"\";\n\n                switch (vall) {\n                  default:\n                    img = \"\";\n                    break;\n\n                  case 1:\n                    img = queen;\n                    break;\n\n                  case -1:\n                    img = x;\n                    break;\n                }\n\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    width: 640 / val.length + 'px',\n                    display: \"inline-block\",\n                    alignContent: \"center\",\n                    justifyContent: \"center\",\n                    textAlignVertical: \"center\",\n                    textAlign: \"center\",\n                    backgroundColor: cur[a % 2 + 1],\n                    margin: \"0.1vh\",\n                    height: \"100%\"\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    style: {\n                      backgroundColor: \"transparent\",\n                      outlineColor: \"transparent\",\n                      borderColor: \"transparent\",\n                      marginTop: \"10%\",\n                      backgroundImage: `url(${img})`,\n                      backgroundSize: \"100% 100%\",\n                      height: \"80%\",\n                      width: \"80%\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 368,\n                  columnNumber: 37\n                }, this);\n              })\n            }, \"row\" + index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/kimjin/Desktop/notes/CISC481/Program2/program2/my-app/src/MainPage/MainPage.jsx"],"names":["React","Container","Row","Col","Button","Modal","ListGroup","Spinner","Select","queen","x","Carousel","options","label","value","colors","colors2","MainPage","Component","constructor","props","Queennumber","e","val","curBoard","i","push","Array","fill","setState","board","board2","JSON","parse","stringify","queens","solution","presetboard","forceUpdate","isSave","row","col","j","length","setrow","rows","column","mypicking","state","picking","tempreset","splice","solveThePuzzle","mysolution","res","solve","after_filter","preset","console","log","forEach","vall","contains","alert","loading","show","results","paint","resultboards","hassolution","tem","clear","newBoard","showselected","curSelectSolution","componentDidMount","render","display","position","top","backgroundColor","width","height","marginTop","marginLeft","border","color","fontWeight","fontSize","map","index","textAlign","borderRadius","back","transform","valll","alignContent","justifyContent","textAlignVertical","margin","a","cur","img","outlineColor","borderColor","backgroundImage","backgroundSize"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    Container,\n    Row,\n    Col,\n    Button,\n    Modal,\n    ListGroup,\n    Spinner,\n  } from \"react-bootstrap\";\nimport \"./MainPage.css\";\nimport Select from \"react-select\";\nimport queen from \"../queen.jpg\";\nimport x from \"../x.jpg\";\nimport Carousel from 'react-bootstrap/Carousel';\n\nvar options = [{ label: \"1 queen\", value: 1 }];\nconst colors = {\n    1: \"#23AF23\",\n    2: \"#98C90B\",\n  };\n  \n  const colors2 = {\n    2: \"#23AF23\",\n    1: \"#98C90B\",\n  };\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: [],\n            board2: [],\n            solution: [],\n            queens: 8,\n            show: false,\n            showselected: false,\n            curSelectSolution: null,\n            loading: \"none\",\n            picking:[],\n            presetboard:[],\n            resultboards: [],\n            hassolution: false,\n        };\n    }\n\n    componentDidMount() {\n        for (var j = 2; j <= 32; j++) {\n          options.push({ label: `${j} queens`, value: j });\n        }\n        var curBoard = [];\n        for (var i = 0; i < this.state.queens; i++) {\n          curBoard.push(new Array(this.state.queens).fill(0));\n        }\n        this.setState({\n          board: curBoard,\n          board2: JSON.parse(JSON.stringify(curBoard)),\n          presetboard: curBoard,\n        });\n      }\n\n    Queennumber = (e) => {\n        const val = e.value;\n        var curBoard = [];\n        for (var i = 0; i < val; i++) {\n          curBoard.push(new Array(val).fill(0));\n        }\n        this.setState({\n          board: curBoard,\n          board2: JSON.parse(JSON.stringify(curBoard)),\n          queens: val,\n          solution: [],\n          presetboard: curBoard,\n        });\n        this.forceUpdate();\n    };\n\n    isSave = (board, row, col) => {\n    var i, j;\n    for (i = 0; i < board.length; i++) if (board[row][i] === 1) return false;\n\n    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)\n        if (board[i][j] === 1) return false;\n\n    for (i = row, j = col; j >= 0 && i < board.length; i++, j--)\n        if (board[i][j] === 1) return false;\n    for (i = row, j = col; i < board.length && j < board.length; i++, j++)\n        if (board[i][j] === 1) return false;\n    for (i = row, j = col; i >= 0 && j < board.length; i--, j++)\n        if (board[i][j] === 1) return false;\n    for (i = board.length; i >= 0; i--) if (board[row][i] === 1) return false;\n    return true;\n    };\n\n    setrow = (e, rows, column) => {\n        var mypicking = this.state.picking;\n        var tempreset = this.state.presetboard;\n        for (var i=0; i<mypicking.length; i++){\n            if (mypicking[i][0] === rows) {\n                tempreset[mypicking[i][0]][mypicking[i][1]] = 0;\n                mypicking.splice(i,1);\n            }\n        }\n        mypicking.push([rows,column]);\n        tempreset[rows][column] = 1\n        this.setState({picking: mypicking, presetboard: tempreset});\n        this.forceUpdate();\n    }\n\n    solveThePuzzle = (board, col, mysolution) => {\n        if (col === board.length) {\n          mysolution.push(JSON.parse(JSON.stringify(board)));\n          return true;\n        }\n        var res = false;\n        for (var i = 0; i < board.length; i++) {\n          if (this.isSave(board, i, col)) {\n            board[i][col] = 1;\n            res = this.solveThePuzzle(board, col + 1, mysolution) || res;\n            board[i][col] = 0;\n          }\n        }\n        return res;\n    };\n\n    solve = (e, i) => {\n        var mysolution = [];\n        this.solveThePuzzle(this.state.board2, 0, mysolution)\n\n        const after_filter = [];\n        const preset = this.state.picking;\n        console.log(this.state.picking);\n        mysolution.forEach((vall) => {\n          var contains = true;\n          for (var i=0; i<preset.length; i++) {\n              if (vall[preset[i][0]][preset[i][1]] === 0) {\n                  console.log(\"reach\");\n                  contains = false;\n              }\n          }\n          if (contains === true) after_filter.push(vall);\n        });\n        if (after_filter.length === 0) {\n            alert(\"there is no solutions\")\n        }\n        this.setState({ solution: after_filter, loading: \"none\"});\n        this.forceUpdate();\n    };\n\n    show = (e, i) => {\n        // console.log(this.state.solution.length);\n\n        if (this.state.solution.length === 0) {\n          alert(\"there is solution for this puzzle yet\");\n          return;\n        }\n        var results =[];\n        const board = this.state.solution[0];\n        for (var j = 0; j < board.length; j++) {\n            results.push(this.paint(board, j));\n        }\n        this.setState({ resultboards: results, hassolution: true });\n    };\n\n    paint = (board, i) => {\n        var tem = JSON.parse(JSON.stringify(board));\n        tem = tem.fill(0);\n        for (var j in i) {\n            tem[j] = board[j];\n        }\n        return tem;\n    }\n\n    clear = () => {\n        var newBoard = [];\n        this.state.board.forEach((val) => {\n          newBoard.push(new Array(val.length).fill(0));\n        });\n        this.setState({\n          board: newBoard,\n          board2: JSON.parse(JSON.stringify(newBoard)),\n          presetboard: newBoard,\n          picking: [],\n          solution: [],\n          hassolution: false,\n        });\n        this.forceUpdate();\n      };\n\n    render() {\n        return (\n            <div className='web-container'>\n                <div className='mainpart'>\n                    <Spinner \n                    animation=\"border\" \n                    role=\"status\"\n                    style={{display: 'none'}}>\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                    <div className='sizeDecide'>\n                        <div id='selection'>\n                            <Select\n                                style={{position: 'absolute', top: '50%'}}\n                                onChange={(e) => {\n                                console.log(e);\n                                this.Queennumber(e);\n                                }}\n                                label=\"Select Queens\"\n                                options={options}\n                            />\n                        </div>\n                        <div id='texts'>\n                            <p>Backtracking Search for n-queeen problem</p>\n                        </div>\n                    </div>\n                    <div style={{backgroundColor:'rgba(0, 0, 0, 0.7)', width: '94%', height: '40%', marginTop: '30px', marginLeft: '3%', border: 'solid #33BCC1 2px'}}>\n                        <p style={{marginTop: '10px', marginLeft: '3%' ,height: '20px', color: 'white', fontWeight: 'bold', fontSize: '15px'}}>Specify Any Required location</p>\n                        <div className='controller'>\n                            {this.state.presetboard.map((val, index) => (\n                                <div className='cheese'>\n                                    <p style={{backgroundColor: '#33BCC1', width: '30px', height: '100%', color: 'white', fontSize: '15px', textAlign: 'center', borderRadius: '6px', display: 'inline-block'}}>\n                                        Q{index+1}:\n                                    </p>\n                                    {val.map((vall, i) => {\n                                        var back = '#9C9E9E';\n                                        switch(vall) {\n                                        default:\n                                            back = '#9C9E9E';\n                                            break;\n                                        case 1:\n                                            back = '#454848';\n                                        }\n                                        return (\n                                            <Button\n                                            className = 'pickrow'\n                                            style={{\n                                                width: \"30px\",\n                                                height: \"100%\",\n                                                backgroundColor: back,\n                                                display: 'inline-block',\n                                                borderRadius: '6px',\n                                                textAlign: 'center',\n                                                color: 'white',\n                                                marginLeft: '1px',\n                                                border: 'none',\n                                                transform: 'translateY(10%)',\n                                            }}\n                                            onClick={(e) => {\n                                                this.setrow(e, index,i)}}>\n                                                {i+1}\n                                            </Button>\n                                        )\n                                        }\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                        <div id='button'>\n                            <Button className='buttons' onClick={this.solve}>\n                                Slove\n                            </Button>\n                            <Button className='buttons' onClick={this.show}>\n                                show\n                            </Button>\n                            <Button className='buttons' onClick={this.clear}>\n                                clear\n                            </Button>\n                        </div>\n                    </div>\n                    {this.state.hassolution ? \n                        <div id='mainboard2'>\n                            {this.state.resultboards.map((valll) => (\n                                <div id='mainboard'>\n                                {valll.map((val, index) => {\n                                    return (\n                                        <div\n                                        xs={10}\n                                        key={\"row\" + index}\n                                        style={{\n                                            height: 640 / this.state.board.length + \"px\",\n                                            alignContent: \"center\",\n                                            justifyContent: \"center\",\n                                            textAlignVertical: \"center\",\n                                            textAlign: \"center\",\n                                            margin: \"0.1vh\"\n                                        }}\n                                        >\n                                        {val.map((vall, a) => {\n                                            const cur = index % 2 === 0 ? colors2 : colors;\n                                            var img = \"\";\n                                            switch (vall) {\n                                            default:\n                                                img = \"\";\n                                                break;\n                                            case 1:\n                                                img = queen;\n                                                break;\n                                            case -1:\n                                                img = x;\n                                                break;\n                                            }\n                                            return (\n                                            <div\n                                                style={{\n                                                width: 640/val.length +'px',\n                                                display: \"inline-block\",\n                                                alignContent: \"center\",\n                                                justifyContent: \"center\",\n                                                textAlignVertical: \"center\",\n                                                textAlign: \"center\",\n                                                backgroundColor: cur[(a % 2) + 1],\n                                                margin: \"0.1vh\",\n                                                height: \"100%\"\n                                                }}\n                                            >\n                                                <Button\n                                                style={{\n                                                    backgroundColor: \"transparent\",\n                                                    outlineColor: \"transparent\",\n                                                    borderColor: \"transparent\",\n                                                    marginTop: \"10%\",\n                                                    backgroundImage: `url(${img})`,\n                                                    backgroundSize: \"100% 100%\",\n                                                    height: \"80%\",\n                                                    width: \"80%\"\n                                                }}\n                                                ></Button>\n                                            </div>\n                                            );\n                                        })}\n                                        </div>\n                                    );\n                                    })}\n                                </div>\n                            ))}\n                        </div>\n                    :\n                        <div id='mainboard'>\n                        {this.state.board.map((val, index) => {\n                            return (\n                                <div\n                                xs={10}\n                                key={\"row\" + index}\n                                style={{\n                                    height: 640 / this.state.board.length + \"px\",\n                                    alignContent: \"center\",\n                                    justifyContent: \"center\",\n                                    textAlignVertical: \"center\",\n                                    textAlign: \"center\",\n                                    margin: \"0.1vh\"\n                                }}\n                                >\n                                {val.map((vall, a) => {\n                                    const cur = index % 2 === 0 ? colors2 : colors;\n                                    var img = \"\";\n                                    switch (vall) {\n                                    default:\n                                        img = \"\";\n                                        break;\n                                    case 1:\n                                        img = queen;\n                                        break;\n                                    case -1:\n                                        img = x;\n                                        break;\n                                    }\n                                    return (\n                                    <div\n                                        style={{\n                                        width: 640/val.length +'px',\n                                        display: \"inline-block\",\n                                        alignContent: \"center\",\n                                        justifyContent: \"center\",\n                                        textAlignVertical: \"center\",\n                                        textAlign: \"center\",\n                                        backgroundColor: cur[(a % 2) + 1],\n                                        margin: \"0.1vh\",\n                                        height: \"100%\"\n                                        }}\n                                    >\n                                        <Button\n                                        style={{\n                                            backgroundColor: \"transparent\",\n                                            outlineColor: \"transparent\",\n                                            borderColor: \"transparent\",\n                                            marginTop: \"10%\",\n                                            backgroundImage: `url(${img})`,\n                                            backgroundSize: \"100% 100%\",\n                                            height: \"80%\",\n                                            width: \"80%\"\n                                        }}\n                                        ></Button>\n                                    </div>\n                                    );\n                                })}\n                                </div>\n                            );\n                            })}\n                        </div>}\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}