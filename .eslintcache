[{"/Users/kimjin/Desktop/notes/CISC481/Program2/nqueen-Web/src/App.js":"1","/Users/kimjin/Desktop/notes/CISC481/Program2/nqueen-Web/src/MainPage/MainPage.jsx":"2","/Users/kimjin/Desktop/notes/CISC481/Program2/nqueen-Web/src/MainPage/MainPage.js":"3"},{"size":343,"mtime":1606519477000,"results":"4","hashOfConfig":"5"},{"size":17563,"mtime":1606701412000,"results":"6","hashOfConfig":"5"},{"size":63,"mtime":1606519548000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"1cia4im",{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kimjin/Desktop/notes/CISC481/Program2/nqueen-Web/src/App.js",["17"],"import logo from './logo.svg';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport './App.css';\n\nimport MainPage from './MainPage/MainPage'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={MainPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",["18","19"],"/Users/kimjin/Desktop/notes/CISC481/Program2/nqueen-Web/src/MainPage/MainPage.jsx",["20","21","22","23","24","25"],"import React from \"react\";\nimport {\n    Container,\n    Row,\n    Col,\n    Button,\n    Modal,\n    ListGroup,\n    Spinner,\n  } from \"react-bootstrap\";\nimport \"./MainPage.css\";\nimport Select from \"react-select\";\nimport queen from \"../queen.jpg\";\nimport x from \"../x.jpg\";\nimport Carousel from 'react-bootstrap/Carousel';\n\nvar options = [{ label: \"1 queen\", value: 1 }];\nconst colors = {\n    1: \"#23AF23\",\n    2: \"#98C90B\",\n  };\n  \n  const colors2 = {\n    2: \"#23AF23\",\n    1: \"#98C90B\",\n  };\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: [],\n            board2: [],\n            solution: [],\n            queens: 8,\n            show: false,\n            showselected: false,\n            curSelectSolution: null,\n            loading: \"none\",\n            picking:[],\n            presetboard:[],\n            resultboards: [],\n            hassolution: false,\n        };\n    }\n\n    componentDidMount() {\n        for (var j = 2; j <= 32; j++) {\n          options.push({ label: `${j} queens`, value: j });\n        }\n        var curBoard = [];\n        for (var i = 0; i < this.state.queens; i++) {\n          curBoard.push(new Array(this.state.queens).fill(0));\n        }\n        this.setState({\n          board: curBoard,\n          board2: JSON.parse(JSON.stringify(curBoard)),\n          presetboard: curBoard,\n        });\n      }\n\n    Queennumber = (e) => {\n        const val = e.value;\n        var curBoard = [];\n        for (var i = 0; i < val; i++) {\n          curBoard.push(new Array(val).fill(0));\n        }\n        this.setState({\n          board: curBoard,\n          board2: JSON.parse(JSON.stringify(curBoard)),\n          queens: val,\n          solution: [],\n          presetboard: curBoard,\n        });\n        this.forceUpdate();\n    };\n\n    isSave = (board, row, col) => {\n    var i, j;\n    for (i = 0; i < board.length; i++) if (board[row][i] === 1) return false;\n\n    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)\n        if (board[i][j] === 1) return false;\n\n    for (i = row, j = col; j >= 0 && i < board.length; i++, j--)\n        if (board[i][j] === 1) return false;\n    for (i = row, j = col; i < board.length && j < board.length; i++, j++)\n        if (board[i][j] === 1) return false;\n    for (i = row, j = col; i >= 0 && j < board.length; i--, j++)\n        if (board[i][j] === 1) return false;\n    for (i = board.length; i >= 0; i--) if (board[row][i] === 1) return false;\n    return true;\n    };\n\n    setrow = (e, rows, column) => {\n        var mypicking = this.state.picking;\n        var tempreset = this.state.presetboard;\n        for (var i=0; i<mypicking.length; i++){\n            if (mypicking[i][0] === rows) {\n                tempreset[mypicking[i][0]][mypicking[i][1]] = 0;\n                mypicking.splice(i,1);\n            }\n        }\n        mypicking.push([rows,column]);\n        tempreset[rows][column] = 1\n        this.setState({picking: mypicking, presetboard: tempreset});\n        this.forceUpdate();\n    }\n\n    solveThePuzzle = (board, col, mysolution) => {\n        if (col === board.length) {\n          mysolution.push(JSON.parse(JSON.stringify(board)));\n          return true;\n        }\n        var res = false;\n        for (var i = 0; i < board.length; i++) {\n          if (this.isSave(board, i, col)) {\n            board[i][col] = 1;\n            res = this.solveThePuzzle(board, col + 1, mysolution) || res;\n            board[i][col] = 0;\n          }\n        }\n        return res;\n    };\n\n    solve = (e, i) => {\n        var mysolution = [];\n        this.solveThePuzzle(this.state.board2, 0, mysolution);\n\n        const after_filter = [];\n        const preset = this.state.picking;\n        console.log(this.state.picking);\n        mysolution.forEach((vall) => {\n          var contains = true;\n          for (var i=0; i<preset.length; i++) {\n              if (vall[preset[i][0]][preset[i][1]] === 0) {\n                  console.log(\"reach\");\n                  contains = false;\n              }\n          }\n          if (contains === true) after_filter.push(vall);\n        });\n        if (after_filter.length === 0) {\n            alert(\"there is no solutions\")\n        }\n        this.setState({ solution: after_filter, loading: \"none\"});\n        this.forceUpdate();\n    };\n\n    show = (e, i) => {\n        // console.log(this.state.solution.length);\n\n        if (this.state.solution.length === 0) {\n          alert(\"there is solution for this puzzle yet\");\n          return;\n        }\n        var results =[];\n        const board = this.state.solution[0];\n        for (var j = 0; j < board.length; j++) {\n            results.push(this.paint(board,j));\n        }\n        this.setState({ resultboards: results, hassolution: true });\n    };\n\n    paint = (board, i) => {\n        var tem = [];\n        this.state.board.forEach((val) => {\n          tem.push(new Array(val.length).fill(0));\n        });\n        for (var r = 0; r<=i; r++) {\n            var c = board[r].indexOf(1);\n            for (var x = 0; x < board.length; x++) {\n                tem[r][x] = 0;\n                if (r+x < board.length) {\n                    tem[r+x][c] = -1;\n                }\n                if ((r+x) < board.length && (c+x) < board.length) {\n                    tem[r+x][c+x] = -1;\n                }\n                if ((r+x) < board.length && (c-x) >=0) {\n                    tem[r+x][c-x] = -1;\n                }\n            }\n            tem[r][c] = 1;\n        }\n        \n        return tem;\n    }\n\n    clear = () => {\n        var newBoard = [];\n        this.state.board.forEach((val) => {\n          newBoard.push(new Array(val.length).fill(0));\n        });\n        this.setState({\n          board: newBoard,\n          board2: JSON.parse(JSON.stringify(newBoard)),\n          presetboard: newBoard,\n          picking: [],\n          solution: [],\n          hassolution: false,\n        });\n        this.forceUpdate();\n      };\n\n    render() {\n        return (\n            <div className='web-container'>\n                <div className='mainpart'>\n                    <Spinner \n                    animation=\"border\" \n                    role=\"status\"\n                    style={{display: 'none'}}>\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                    <div className='sizeDecide'>\n                        <div id='selection'>\n                            <Select\n                                style={{position: 'absolute', top: '50%'}}\n                                onChange={(e) => {\n                                console.log(e);\n                                this.Queennumber(e);\n                                }}\n                                label=\"Select Queens\"\n                                options={options}\n                            />\n                        </div>\n                        <div id='texts'>\n                            <p>Backtracking Search for n-queeen problem</p>\n                        </div>\n                    </div>\n                    <div style={{backgroundColor:'rgba(0, 0, 0, 0.7)', width: '94%', height: '40%', marginTop: '30px', marginLeft: '3%', border: 'solid #33BCC1 2px'}}>\n                        <p style={{marginTop: '10px', marginLeft: '3%' ,height: '20px', color: 'white', fontWeight: 'bold', fontSize: '15px'}}>Specify Any Required location</p>\n                        <div className='controller'>\n                            {this.state.presetboard.map((val, index) => (\n                                <div className='cheese'>\n                                    <p style={{backgroundColor: '#33BCC1', width: '30px', height: '100%', color: 'white', fontSize: '15px', textAlign: 'center', borderRadius: '6px', display: 'inline-block'}}>\n                                        Q{index+1}:\n                                    </p>\n                                    {val.map((vall, i) => {\n                                        var back = '#9C9E9E';\n                                        switch(vall) {\n                                        default:\n                                            back = '#9C9E9E';\n                                            break;\n                                        case 1:\n                                            back = '#454848';\n                                        }\n                                        return (\n                                            <Button\n                                            className = 'pickrow'\n                                            style={{\n                                                width: \"30px\",\n                                                height: \"100%\",\n                                                backgroundColor: back,\n                                                display: 'inline-block',\n                                                borderRadius: '6px',\n                                                textAlign: 'center',\n                                                color: 'white',\n                                                marginLeft: '1px',\n                                                border: 'none',\n                                                transform: 'translateY(10%)',\n                                            }}\n                                            onClick={(e) => {\n                                                this.setrow(e, index,i)}}>\n                                                {i+1}\n                                            </Button>\n                                        )\n                                        }\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                        <div id='button'>\n                            <Button className='buttons' onClick={this.solve}>\n                                Slove\n                            </Button>\n                            <Button className='buttons' onClick={this.show}>\n                                show\n                            </Button>\n                            <Button className='buttons' onClick={this.clear}>\n                                clear\n                            </Button>\n                        </div>\n                    </div>\n                    {this.state.hassolution ? \n                        <div id='mainboard2'>\n                            {this.state.resultboards.map((valll) => (\n                                <div id='mainboard'>\n                                {valll.map((val, index) => {\n                                    return (\n                                        <div\n                                        key={\"row\" + index}\n                                        style={{\n                                            height: 640 / this.state.board.length + \"px\",\n                                            alignContent: \"center\",\n                                            justifyContent: \"center\",\n                                            textAlignVertical: \"center\",\n                                            textAlign: \"center\",\n                                            margin: \"0.1vh\"\n                                        }}\n                                        >\n                                        {val.map((vall, a) => {\n                                            const cur = index % 2 === 0 ? colors2 : colors;\n                                            var img = \"\";\n                                            switch (vall) {\n                                            default:\n                                                img = \"\";\n                                                break;\n                                            case 1:\n                                                img = queen;\n                                                break;\n                                            case -1:\n                                                img = x;\n                                                break;\n                                            }\n                                            return (\n                                            <div\n                                                style={{\n                                                width: 640/val.length +'px',\n                                                display: \"inline-block\",\n                                                alignContent: \"center\",\n                                                justifyContent: \"center\",\n                                                textAlignVertical: \"center\",\n                                                textAlign: \"center\",\n                                                backgroundColor: cur[(a % 2) + 1],\n                                                margin: \"0.1vh\",\n                                                height: \"100%\"\n                                                }}\n                                            >\n                                                <Button\n                                                style={{\n                                                    backgroundColor: \"transparent\",\n                                                    outlineColor: \"transparent\",\n                                                    borderColor: \"transparent\",\n                                                    marginTop: \"10%\",\n                                                    backgroundImage: `url(${img})`,\n                                                    backgroundSize: \"100% 100%\",\n                                                    height: \"80%\",\n                                                    width: \"80%\"\n                                                }}\n                                                ></Button>\n                                            </div>\n                                            );\n                                        })}\n                                        </div>\n                                    );\n                                    })}\n                                </div>\n                            ))}\n                        </div>\n                    :\n                        <div id='mainboard'>\n                        {this.state.board.map((val, index) => {\n                            return (\n                                <div\n                                key={\"row\" + index}\n                                style={{\n                                    height: 640 / this.state.board.length + \"px\",\n                                    alignContent: \"center\",\n                                    justifyContent: \"center\",\n                                    textAlignVertical: \"center\",\n                                    textAlign: \"center\",\n                                    margin: \"0.1vh\"\n                                }}\n                                >\n                                {val.map((vall, a) => {\n                                    const cur = index % 2 === 0 ? colors2 : colors;\n                                    var img = \"\";\n                                    switch (vall) {\n                                    default:\n                                        img = \"\";\n                                        break;\n                                    case 1:\n                                        img = queen;\n                                        break;\n                                    case -1:\n                                        img = x;\n                                        break;\n                                    }\n                                    return (\n                                    <div\n                                        style={{\n                                        width: 640/val.length +'px',\n                                        display: \"inline-block\",\n                                        alignContent: \"center\",\n                                        justifyContent: \"center\",\n                                        textAlignVertical: \"center\",\n                                        textAlign: \"center\",\n                                        backgroundColor: cur[(a % 2) + 1],\n                                        margin: \"0.1vh\",\n                                        height: \"100%\"\n                                        }}\n                                    >\n                                        <Button\n                                        style={{\n                                            backgroundColor: \"transparent\",\n                                            outlineColor: \"transparent\",\n                                            borderColor: \"transparent\",\n                                            marginTop: \"10%\",\n                                            backgroundImage: `url(${img})`,\n                                            backgroundSize: \"100% 100%\",\n                                            height: \"80%\",\n                                            width: \"80%\"\n                                        }}\n                                        ></Button>\n                                    </div>\n                                    );\n                                })}\n                                </div>\n                            );\n                            })}\n                        </div>}\n                </div>\n            </div>\n        );\n    }\n}","/Users/kimjin/Desktop/notes/CISC481/Program2/nqueen-Web/src/MainPage/MainPage.js",[],{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"26","severity":1,"message":"34","line":3,"column":5,"nodeType":"28","messageId":"29","endLine":3,"endColumn":14},{"ruleId":"26","severity":1,"message":"35","line":4,"column":5,"nodeType":"28","messageId":"29","endLine":4,"endColumn":8},{"ruleId":"26","severity":1,"message":"36","line":5,"column":5,"nodeType":"28","messageId":"29","endLine":5,"endColumn":8},{"ruleId":"26","severity":1,"message":"37","line":7,"column":5,"nodeType":"28","messageId":"29","endLine":7,"endColumn":10},{"ruleId":"26","severity":1,"message":"38","line":8,"column":5,"nodeType":"28","messageId":"29","endLine":8,"endColumn":14},{"ruleId":"26","severity":1,"message":"39","line":15,"column":8,"nodeType":"28","messageId":"29","endLine":15,"endColumn":16},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Modal' is defined but never used.","'ListGroup' is defined but never used.","'Carousel' is defined but never used.","no-global-assign","no-unsafe-negation"]